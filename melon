import sys import time import random import json import numpy as np import cv2 import pyautogui from pynput import mouse

from PyQt5.QtWidgets import ( QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit ) from PyQt5.QtCore import ( QThread, pyqtSignal, QMutex, QWaitCondition, QTimer )

#########################################

초기 클릭 좌표 기록 스레드

######################################### class InitialClickRecorderThread(QThread): recorded_signal = pyqtSignal(list) message_signal = pyqtSignal(str)

def run(self):
    self.message_signal.emit("초기 17회 클릭: 화면에서 원하는 좌표를 클릭하세요.")
    self.clicks = []
    def on_click(x, y, button, pressed):
        if pressed:
            self.clicks.append((x, y))
            self.message_signal.emit(f"클릭 기록: {(x, y)} ({len(self.clicks)}/17)")
            if len(self.clicks) >= 17:
                return False
    with mouse.Listener(on_click=on_click) as listener:
        listener.join()
    self.recorded_signal.emit(self.clicks)

#########################################

랜덤 클릭 스레드 (클릭 후 즉시 색상 감지)

######################################### class RandomClickThread(QThread): log_signal = pyqtSignal(str) trigger_detection = pyqtSignal()

def __init__(self, coordinates, parent=None):
    super().__init__(parent)
    self.coordinates = coordinates
    self._running = True
    self.paused = False
    self.mutex = QMutex()
    self.pause_condition = QWaitCondition()

def run(self):
    while self._running:
        self.mutex.lock()
        if self.paused:
            self.pause_condition.wait(self.mutex)
        self.mutex.unlock()
        try:
            coord = random.choice(self.coordinates)
            pyautogui.moveTo(coord[0], coord[1], duration=0.2)
            pyautogui.click()
            self.log_signal.emit(f"랜덤 클릭: {coord}")
            self.trigger_detection.emit()
        except Exception as e:
            self.log_signal.emit("랜덤 클릭 오류: " + str(e))
        time.sleep(0.2)

def pause(self):
    self.mutex.lock()
    self.paused = True
    self.mutex.unlock()

def resume(self):
    self.mutex.lock()
    self.paused = False
    self.pause_condition.wakeAll()
    self.mutex.unlock()

def stop(self):
    self._running = False
    self.resume()

#########################################

색상 감지 스레드

######################################### class ColorDetectionThread(QThread): detected_signal = pyqtSignal(tuple)

def __init__(self, target_color, tolerance=30, region=(0, 0, 100, 100), parent=None):
    super().__init__(parent)
    self.target_color = target_color
    self.tolerance = tolerance
    self.region = region
    self._running = True

def run(self):
    while self._running:
        try:
            screenshot = pyautogui.screenshot(region=self.region)
            img = np.array(screenshot)
            lower_bound = np.array([max(0, c - self.tolerance) for c in self.target_color])
            upper_bound = np.array([min(255, c + self.tolerance) for c in self.target_color])
            mask = cv2.inRange(img, lower_bound, upper_bound)
            coords = np.column_stack(np.where(mask > 0))
            if coords.size != 0:
                y, x = coords[0]
                detected_coord = (self.region[0] + x, self.region[1] + y)
                self.detected_signal.emit(detected_coord)
                break
        except Exception as e:
            print("색상 감지 오류:", e)
        time.sleep(0.2)

def stop(self):
    self._running = False

#########################################

메인 윈도우

######################################### class MainWindow(QMainWindow): def init(self): super().init() self.setWindowTitle("감시 프로그램") self.resize(450, 450)

self.monitoring_region = (32, 190, 600, 440)
    self.target_color = None
    self.initial_click_coords = []
    self.random_thread = None
    self.color_detection_thread = None
    
    central_widget = QWidget()
    self.setCentralWidget(central_widget)
    layout = QVBoxLayout(central_widget)
    
    self.label_status = QLabel("상태: 대기 중")
    layout.addWidget(self.label_status)
    
    self.text_log = QTextEdit()
    self.text_log.setReadOnly(True)
    layout.addWidget(self.text_log)

def log_message(self, msg):
    self.text_log.append(msg)
    print(msg)

def start_random_click_thread(self):
    if not self.initial_click_coords:
        self.log_message("초기 좌표 기록 실패, 랜덤 클릭 중단.")
        return
    self.random_thread = RandomClickThread(self.initial_click_coords)
    self.random_thread.log_signal.connect(self.log_message)
    self.random_thread.trigger_detection.connect(self.start_color_detection_thread)
    self.random_thread.start()

def start_color_detection_thread(self):
    if self.monitoring_region is None or self.target_color is None:
        return
    self.color_detection_thread = ColorDetectionThread(
        target_color=self.target_color,
        tolerance=30,
        region=self.monitoring_region
    )
    self.color_detection_thread.detected_signal.connect(self.on_color_detected)
    self.color_detection_thread.start()

def on_color_detected(self, detected_coord):
    self.log_message(f"색상 감지됨 at {detected_coord}. 클릭 진행 중...")
    if self.random_thread:
        self.random_thread.pause()
    self.perform_detection_click(detected_coord)

def perform_detection_click(self, detected_coord):
    adjusted_coord = (detected_coord[0] + 5, detected_coord[1] + 5)
    pyautogui.moveTo(adjusted_coord[0], adjusted_coord[1], duration=0.2)
    pyautogui.click()
    self.log_message("감지 좌표(오프셋 적용) 클릭 완료")
    QTimer.singleShot(3000, self.resume_random_click)

def resume_random_click(self):
    if self.random_thread:
        self.random_thread.resume()
    self.log_message("랜덤 클릭 재개됨.")

if name == "main": app = QApplication(sys.argv) window = MainWindow() window.show() sys.exit(app.exec_())

